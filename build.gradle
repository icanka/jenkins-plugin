plugins {
    id 'java'
    id 'org.jenkins-ci.jpi' version '0.46.0'
}

repositories {
    mavenLocal()
    maven {
        url('https://repo.jenkins-ci.org/public/')
    }

    maven {
        url('https://repo.maven.apache.org/maven2/')
    }
}

group = 'org.jenkins-ci.plugins'
version = '0.0.1-SNAPSHOT'
description = 'A test jenkins plugin'

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    jenkinsVersion = project.properties['jenkinsVersion']
    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'hello-world'
    // human-readable name of plugin
    displayName = 'Hello World plugin built with Gradle'
    // URL for plugin on Jenkins wiki or elsewhere
    url = 'http://wiki.jenkins-ci.org/display/JENKINS/SomePluginPage'
    // plugin URL on GitHub, optional
    gitHubUrl = 'https://github.com/jenkinsci/some-plugin'
    // use the plugin class loader before the core class loader, defaults to false
    pluginFirstClassLoader = true
    // optional list of package prefixes that your plugin doesn't want to see from core
    maskClasses = 'groovy.grape org.apache.commons.codec'
    // optional version number from which this plugin release is configuration-compatible
    compatibleSinceVersion = '0.0.1'
    // set the directory from which the development server will run, defaults to 'work'
    workDir = file("${projectDir}/jenkins")
    // URL used to deploy the plugin, defaults to the value shown
    // the system property 'jpi.repoUrl' can be used to override this option
    repoUrl = 'https://repo.jenkins-ci.org/releases'
    // URL used to deploy snapshots of the plugin, defaults to the value shown
    // the system property 'jpi.snapshotRepoUrl' can be used to override this option
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'
    // enable injection of additional tests for checking the syntax of Jelly and other things
    disabledTestInjection = false
    // the output directory for the localizer task relative to the project root, defaults to the value shown
    //localizerOutputDir = "${project.buildDir}/src/localizer"
    localizerOutputDir = "${projectDir}/src/localizer"
    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    configureRepositories = false
    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    configurePublishing = false
    // plugin file extension, either 'jpi' or 'hpi', defaults to 'hpi'
    fileExtension = 'jpi'
    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'icanka'
            name 'Izzet Can Karakus'
            email 'izzetcankarakus@gmail.com'
        }
    }
    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            name 'Apache License, Version 2.0'
            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
            comments 'A business-friendly OSS license'
        }
    }
}

tasks.named('server').configure {
    it.port.set('8081')
}
tasks.named('server').configure {
    execSpec {
        maxHeapSize = '8g'
    }
}

dependencies {
    // This bom gives us the baitlity to use some dependencies without worrying about their versions
    implementation(platform('io.jenkins.tools.bom:bom-2.346.x:1595.v8c71c13cc3a_9'))
    implementation 'io.jenkins.plugins:data-tables-api:1.12.1-4'
    //implementation 'org.jenkins-ci.plugins:structs'

    testImplementation "org.jenkins-ci.main:jenkins-war:${project.properties['jenkinsVersion']}"
    testImplementation 'org.jenkins-ci:test-annotations:1.4'
    testImplementation 'junit:junit'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-cps'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-job'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step'
    testImplementation 'org.jenkins-ci.main:jenkins-test-harness'

    compileOnly 'org.jenkins-ci.main:jenkins-core'
    compileOnly 'javax.servlet:javax.servlet-api'
    compileOnly 'net.jcip:jcip-annotations'
    compileOnly 'commons-logging:commons-logging'
    compileOnly 'org.jenkins-ci.plugins:structs'
    compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.21'

}

configurations.all {
    exclude(group: 'javax.servlet', module: 'servlet-api')
    exclude(group: 'org.sonatype.sisu', module: 'sisu-guice')
    exclude(group: 'log4j', module: 'log4j')
    exclude(group: 'log4j', module: 'log4j')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'org.apache.logging.log4j')
    exclude(group: 'org.testng', module: 'testng')
}

tasks.register('testsJar', Jar) {
    archiveClassifier = 'tests'
    from(sourceSets.test.output)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}